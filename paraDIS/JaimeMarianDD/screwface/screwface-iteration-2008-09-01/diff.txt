10c10
< // HUGELY USEFUL MACROS FOR DEBUGGING: 
---
> // HUGELY USEFUL MACRO FOR DEBUGGING: 
14,16d13
< #macro axis(axisLocation, axisOrientation, axisSize, axisDiameter, axisColor)
< cylinder {axisLocation, axisLocation+axisOrientation*axisSize, axisDiameter pigment { axisColor  } finish { brightfinish }}
< #end
49,58d45
< // the star of the show: 
< #declare tetvert1=<13,0,0>;
< #declare tetvert2=<0,0,13>;
< #declare tetvert3=<0,13,0>;
< #declare tetvert4=<13,13,13>;
< #declare tetcenter = (tetvert1 + tetvert2 + tetvert3 + tetvert4)/4.0; 
< // ===========================================================
< 
< 
< printvector(tetcenter, "tetcenter")
61c48
< #declare camerapos = <71.0, 10.0,-13.1070155>;
---
> #declare camerapos = 0.1*<710.0, 100.0,-131.070155>;
64c51
< #declare camerapos = <32.2, 3.5, -9.2>;
---
> #declare camerapos = 0.07*<460.0, 50.0,-131.070155>;
68,87c55
< #declare camerapos = <324.0, 80.0, 52.4>;
< #end
< #ifdef (reverse)
< #declare camerapos =  2.5*<35.0, -5.0, 25.0>;
< // #declare camerapos =  1.5*<0, 20, 20>;
< #end
< 
< #declare camvec = vnormalize(camerapos-lookatpos); 
< #declare camperpvec1 = vnormalize(VPerp_To_Vector(camvec));
< #declare camperpvec2 = vnormalize(VPerp_To_Plane(camvec, camperpvec1)); 
< printvector (camvec, "camvec")
<      printvector(camperpvec1, "camperpvec1")
<      printvector(camperpvec2, "camperpvec2")
< 
< #ifdef (debug)
< sphere {lookatpos, 0.5  
<     pigment {color Yellow } finish { brightfinish }
< }
< axis(lookatpos, camperpvec1, 200, 0.05, color Orange)
< axis(lookatpos, camperpvec2, 200, 0.05, color Green)
---
> #declare camerapos = 0.4*<810.0, 200.0, 131.070155>;
93,97c61
<   /*
<    orthographic
<    up viewy
<    right viewx
<   */
---
>   //orthographic
104,107c68,72
<     // sky <0,0.2,1>
<     // sky tetvert4 - tetcenter
<     //    angle 35
<     angle 45
---
>     //  up viewy
>     //right viewx
>     //    sky <0,0.2,1>
>     sky <0,0.5,1>
>     angle 35
109a75,80
> #declare camvec = vnormalize(camerapos-lookatpos); 
> #declare camperpvec1 = vnormalize(VPerp_To_Vector(camvec));
> #declare camperpvec2 = vnormalize(VPerp_To_Plane(camvec, camperpvec1)); 
> printvector (camvec, "camvec")
>      printvector(camperpvec1, "camperpvec1")
>      printvector(camperpvec2, "camperpvec2")
113,120c84,86
< //#declare spotlightPos =  10*(camerapos - 15*(camperpvec1+camperpvec2)); 
< // #declare spotlightPos =  <280,250,10>;
< #declare moffset=30* (camvec -  0.2* (camperpvec1+camperpvec2));
< #declare normalizedOffset = vnormalize(moffset); 
< printvector(normalizedOffset, "normalizedOffset")
< #declare spotlightPos =  lookatpos + moffset;
< //#declare spotlight_pointat = <1,5,7>; 
< #declare spotlight_pointat = tetcenter - <0,0,10>; 
---
> //#declare spotlightPos =  camerapos + 10*camperpvec1; 
> #declare spotlightPos =  <280,250,10>;
> #declare spotlight_pointat = <1,5,7>; 
122,124c88,89
<  
< #declare umbraLightSize = 500.0; 
< /*light_source {
---
> #declare umbraLightSize = 1500.0; 
> light_source {
126c91
<   color 0.56
---
>   color 1.1
135d99
< */
140c104
<     color 1
---
>     color 0.50
142,143d105
<     falloff 90
<     radius 40
145c107,109
<     //tightness 0
---
>     falloff 15
>     radius 10
>     tightness 0
150d113
< 
152d114
< // place a green sphere at the point_at spot for the lights
155c117
<   spotlight_pointat, 0.75
---
>   spotlight_pointat, 2
158,164d119
<      sphere {
<   spotlightPos, 0.75
<     texture {pigment {color Orange} finish {ambient 0.5}}
< }
< //also a yellow cylinder showing the direction of the lights
< #declare spotvec = spotlightPos-spotlight_pointat; 
< cylinder {spotlightPos, 2 * spotlight_pointat - spotlightPos , 0.5 pigment { color Yellow  } finish { brightfinish }}
345,347c300,312
< // for backwards view: 
< #declare bgorigin = tetcenter - 10*camvec;
< #declare bgextent = 150;
---
> #declare bgorigin = lookatpos - 0.005*camvec;
> 
> 
> printvector(camerapos, "camerapos")
> 
> #declare bgextent = 1000;
> #declare bgvec1 = bgextent * camperpvec1;
> #declare bgvec2 = bgextent * camperpvec2;
> printvector(bgvec1, "bgvec1")
>      printvector(bgvec2, "bgvec2")
> #declare bgthickness = 0.01; 
> #declare bgstart = bgorigin - bgvec1 - bgvec2;
> #declare bgend=   bgorigin + bgvec1 + bgvec2 + 0.00001*camvec;
349,357c314
< /* 
<  #declare bgvec1 = bgextent * camperpvec1;
<  #declare bgvec2 = bgextent * camperpvec2;
<  printvector(bgvec1, "bgvec1")
<  printvector(bgvec2, "bgvec2")
<  printvector(bgvec1+bgvec2, "bgvec1+bgvec2")
<  #declare bgthickness = 0.01; 
<  #declare bgstart = bgorigin - bgvec1 - bgvec2;
<  #declare bgend=   bgorigin + bgvec1 + bgvec2 + 0.00001*camvec;
---
>      printvector(camvec,"camvec")
360,361c317
< */ 
< //#declare     boxx = lookatpos.x + 0.1 * (lookatpos.x - camerapos.x ) ;
---
> #declare     boxx = -15;
363,370c319,320
<   
<    bgorigin+<0, bgextent, bgextent>, bgorigin+<-0.001, -bgextent, -bgextent>
<      // shouldn't have to change rotation:
<      rotate <0,-20,40>
<    
<      //bgstart, bgend
<     //  rotate -40*camperpvec2
<     // bgstart, bgend
---
>   <boxx, bgextent, bgextent>, <boxx-0.001, -bgextent, -bgextent>
>     rotate <0,0,40>
376d325
<     finish { dullfinish }
380c329,334
< 
---
> #ifdef (debug)
> sphere {
>   <0,0,boxx>, 2.0
>     pigment {color Red}
> }
> #end
383c337
< #ifdef (xxmakebox)
---
> #ifdef (makebox)
385c339
<   -20*boundsize, 20*boundsize
---
>   -10*boundsize, 10*boundsize
399a354
> 
403,407c358,362
< axis(axisLocation, x, axisSize, axisDiameter, color Red)
< axis(axisLocation, -x, axisSize, axisDiameter, color Orange)
< // green/yellow is Y
< axis(axisLocation, y, axisSize, axisDiameter, color Green)
< axis(axisLocation, -y, axisSize, axisDiameter, color Yellow)
---
> cylinder {axisLocation, axisLocation+x*axisSize, axisDiameter pigment {color Red  } finish { brightfinish }}
> cylinder {axisLocation-x*axisSize, axisLocation, axisDiameter pigment {color Orange } finish { brightfinish }}
> // white/black is Y
> cylinder {axisLocation, axisLocation+y*axisSize, axisDiameter pigment {color White} finish { brightfinish }}
> cylinder {axisLocation-y*axisSize, axisLocation, axisDiameter pigment {color red 0.02 green 0.02 blue 0.02 } finish { brightfinish }}
409,410c364,365
< axis(axisLocation, z, axisSize, axisDiameter, color Blue)
< axis(axisLocation, -z, axisSize, axisDiameter, color Cyan)
---
> cylinder {axisLocation, axisLocation+z*axisSize, axisDiameter pigment {color Blue } finish { brightfinish }}
> cylinder {axisLocation-z*axisSize, axisLocation, axisDiameter pigment {color Cyan } finish { brightfinish }}
413a369,371
> /*sphere {cameraLookAt, 500   
>     pigment {color Orange } finish { brightfinish }
>     }*/
417,429c375
< // Create a grid in space... 
< #declare gridspacing = 10.0; 
< #declare numgrids = 2;
< 
< #macro dogrid(gridperp, gridx,gridy,gridcolor)
< #declare i = -numgrids*gridspacing; 
< #while (i <= numgrids*gridspacing)
< #declare j = -numgrids*gridspacing; 
< #while (j <= numgrids*gridspacing)
< #declare k = -numgrids * gridspacing;
< axis (i*gridx+j*gridy+k*gridperp, gridperp, 2*numgrids*gridspacing, 0.05, gridcolor)
< #while (k <= numgrids*gridspacing)
< sphere {i*gridx+j*gridy+k*gridperp, 0.2
---
> sphere {x*10, 0.5  
432,442c378,384
< #declare k = k+gridspacing;
< #end
< #declare j = j+gridspacing;
< #end
< #declare i = i+gridspacing;
< #end
< #end // dogrid
< dogrid (x,y,z,color White)
<   dogrid (y,z,x, color White)
<   dogrid (z,y,x, color White)
<   wormAxes (0, 100, 0.07)
---
> sphere {y*10, 0.5  
>     pigment {color Gray } finish { brightfinish }
> }
> sphere {z*10, 0.5  
>     pigment {color Gray } finish { brightfinish }
> }
> wormAxes (0, 100, 0.1)
446c388
<   lookatpos, 0.75
---
>   lookatpos, 2
449,509c391
< // try to locate the tet vertices:
< #declare lapradius=0.6;
< #macro tetsphere(loc, tetcolor)
< sphere { 
<   loc, lapradius
<     texture { pigment { tetcolor} finish {ambient 0.1}}
<     }
< #end
< tetsphere(tetvert1, color Red)
<   tetsphere(tetvert2, color Yellow)
<   tetsphere(tetvert3, color Green)
<   tetsphere(tetvert4, color Blue)
< // now the tet center is:
<   tetsphere(tetcenter, color White)
< // draw the scene bounds if provided:
< #ifdef (lowerbounds)
< #if (0) // changed my mind
< #macro makecyl(p1,p2)
<   cylinder {p1, p2, 0.05 pigment {color White} finish {brightfinish}}
< #end
< #debug "drawing bounding box\n"
< makecyl(lowerbounds, <lowerbounds.x, lowerbounds.y, upperbounds.z>)
< makecyl(<lowerbounds.x, lowerbounds.y, upperbounds.z>, <upperbounds.x, lowerbounds.y, upperbounds.z>)
< makecyl(<lowerbounds.x, lowerbounds.y, upperbounds.z>, <lowerbounds.x, upperbounds.y, upperbounds.z>)
< makecyl(lowerbounds, <lowerbounds.x, upperbounds.y, lowerbounds.z>)
< makecyl(<lowerbounds.x, upperbounds.y, lowerbounds.z>, <upperbounds.x, upperbounds.y, lowerbounds.z>)
< makecyl(<lowerbounds.x, upperbounds.y, lowerbounds.z>, <lowerbounds.x, upperbounds.y, upperbounds.z>)
< makecyl(lowerbounds, <upperbounds.x, lowerbounds.y, lowerbounds.z>)
< makecyl(<upperbounds.x, lowerbounds.y, lowerbounds.z>, <upperbounds.x, upperbounds.y, lowerbounds.z>)
< makecyl(<upperbounds.x, lowerbounds.y, lowerbounds.z>, <upperbounds.x, lowerbounds.y, upperbounds.z>)
< 
< makecyl(upperbounds, <upperbounds.x, upperbounds.y, lowerbounds.z>)
< makecyl(<upperbounds.x, upperbounds.y, lowerbounds.z>, <lowerbounds.x, upperbounds.y, lowerbounds.z>)
< makecyl(<upperbounds.x, upperbounds.y, lowerbounds.z>, <upperbounds.x, lowerbounds.y, lowerbounds.z>)
< makecyl(upperbounds, <upperbounds.x, lowerbounds.y, upperbounds.z>)
< makecyl(<upperbounds.x, lowerbounds.y, upperbounds.z>, <lowerbounds.x, lowerbounds.y, upperbounds.z>)
< makecyl(<upperbounds.x, lowerbounds.y, upperbounds.z>, <upperbounds.x, lowerbounds.y, lowerbounds.z>)
< makecyl(upperbounds, <lowerbounds.x, upperbounds.y, upperbounds.z>)
< makecyl(<lowerbounds.x, upperbounds.y, upperbounds.z>, <lowerbounds.x, lowerbounds.y, upperbounds.z>)
< makecyl(<lowerbounds.x, upperbounds.y, upperbounds.z>, <lowerbounds.x, upperbounds.y, lowerbounds.z>)
< box {
<   lowerbounds, upperbounds
<     pigment { color rgbf 0.9 }
<   hollow
<     interior {
<     media {
<       absorption 0.0000001
< 	//      scattering {1, color rgb<0.000025,0.00005,0.000025> extinction 0}
<       //scattering {1, color 0.001 extinction 0.5}
<       method 3
< 	intervals 1
< 	jitter 1.0
<         }
<   }
< }
< #end
< #printvector(lowerbounds, "lowerbounds")
< #printvector(upperbounds, "upperbounds")
< #else
< #debug "NOT drawing bounding box\n"
< #end // lowerbounds
---
> wormAxes (lookatpos, 10, 0.1)
